@{
}

<form method="post" enctype="multipart/form-data" oninput="updateFuelTypeHidden()" onsubmit="validateForm(event)">
    <div class="container p-3 my-3 border border-1 rounded rounded-3 shadow" style="max-width: 700px">
        <h1 class="text-center">Добавление товара</h1>
        <hr/>
        @* Марка *@
        <div class="mb-3">
            <label for="brand_input" class="form-label">Марка</label>
            <input type="text" name="brand" class="form-control" id="brand_input" placeholder="Введите марку"
                   oninput="unsetIsInvalidState(this)">
            <div class="invalid-feedback">
                Заполните это поле.
            </div>
        </div>
        @* Модель *@
        <div class="mb-3">
            <label for="model_input" class="form-label">Модель</label>
            <input type="text" name="model" class="form-control" id="model_input" placeholder="Введите модель"
                   oninput="unsetIsInvalidState(this)">
            <div class="invalid-feedback">
                Заполните это поле.
            </div>
        </div>
        @* Цена за стандартную комплектацию *@
        <div class="mb-3">
            <label for="price_input" class="form-label">Цена за стандартную комплектацию</label>
            <input type="text" name="price" class="form-control" id="price_input"
                   placeholder="Введите цену за стандартную комплектацию" oninput="unsetIsInvalidState(this)">
            <div class="invalid-feedback">
                Введите положительное число.
            </div>
        </div>
        @* Цвет *@
        <div class="mb-3">
            <label for="color_input" class="form-label">Цвет</label>
            <input type="text" name="color" class="form-control" id="color_input" placeholder="Введите цвет"
                   oninput="unsetIsInvalidState(this)">
            <div class="invalid-feedback">
                Заполните это поле.
            </div>
        </div>
        @* Объём двигателя *@
        <div class="mb-3">
            <label for="engine_capacity_input" class="form-label">Объём двигателя <span class="form-text">(литры)</span></label>
            <input type="text" name="engine_capacity" class="form-control" id="engine_capacity_input"
                   placeholder="Введите объём двигателя" oninput="unsetIsInvalidState(this)">
            <div class="invalid-feedback">
                Введите положительное число.
            </div>
        </div>
        @* Вид корпуса *@
        <div class="mb-3">
            <label for="corpus_type_select" class="form-label">Вид корпуса</label>
            <select name="corpus_type" id="corpus_type_select" class="form-select"
                    oninput="unsetIsInvalidState(this)">
                <option disabled selected value="">Выберите вид корпуса</option>
                <option value="0">Седан</option>
                <option value="1">Хэтчбек</option>
            </select>
            <div class="invalid-feedback">
                Выберите вид корпуса.
            </div>
        </div>
        @* Вид топлива *@
        <div class="mb-3">
            <input type="hidden" id="fuel_type_value" name="fuel_type" value="0"/>
            <label class="form-label">Вид топлива</label>
            <div class="form-check form-switch">
                <input class="form-check-input" value="1" type="checkbox" role="button" id="fuel_type_petrol"
                       onchange="unsetIsInvalidState(this.parentElement)">
                <label class="form-check-label" for="fuel_type_petrol">Бензин</label>
            </div>
            <div class="form-check form-switch">
                <input class="form-check-input" value="2" type="checkbox" role="button" id="fuel_type_diesel"
                       onchange="unsetIsInvalidState(document.querySelector('.form-check.form-switch'))">
                <label class="form-check-label" for="fuel_type_diesel">Дизель</label>
            </div>
            <div class="form-check form-switch">
                <input class="form-check-input" value="4" type="checkbox" role="button" id="fuel_type_gas"
                       onchange="unsetIsInvalidState(document.querySelector('.form-check.form-switch'))">
                <label class="form-check-label" for="fuel_type_gas">Газ</label>
            </div>
            <div class="form-check form-switch">
                <input class="form-check-input" value="8" type="checkbox" role="button" id="fuel_type_electric"
                       onchange="unsetIsInvalidState(document.querySelector('.form-check.form-switch'))">
                <label class="form-check-label" for="fuel_type_electric">Электрика</label>
            </div>
            <div class="invalid-feedback">
                Выберите хотябы один элемент.
            </div>
        </div>
        @* Количество единиц товара на складе *@
        <div class="mb-3">
            <label for="count_input" class="form-label">Количество единиц товара на складе</label>
            <input type="text" name="count" class="form-control" id="count_input"
                   placeholder="Введите количество единиц товара на складе" oninput="unsetIsInvalidState(this)">
            <div class="invalid-feedback">
                Введите целое положительное число или 0.
            </div>
        </div>
        @* Картинка для /catalog *@
        <div class="mb-3">
            <label for="image_input" class="form-label">Картинка для <span class="fw-bold">/catalog</span></label>
            <input class="form-control" name="image" accept=".jpg, .jpeg, .png" type="file" id="image_input"
                   onchange="validateFileInput(this)">
            <div class="invalid-feedback">
                Допустимые форматы: .jpg, .jpeg, .png
            </div>
        </div>
        @* Картинки для /catalog/{id} *@
        <div class="mb-3">
            <label for="big_images_input" class="form-label">Картинки для <span class="fw-bold">/catalog/{id}</span></label>
            <input class="form-control" name="big_images" accept=".jpg, .jpeg, .png" type="file" id="big_images_input"
                   onchange="validateFileInput(this)" multiple>
            <div class="invalid-feedback">
                Допустимые форматы: .jpg, .jpeg, .png
            </div>
        </div>
        @* Дополнительные опции *@
        <input type="hidden" name="additional_car_options" id="additional_car_options">
        <div class="accordion mb-3">
            <div class="accordion-item">
                <h2 class="accordion-header">
                    <button class="accordion-button collapsed" type="button" data-bs-toggle="collapse" data-bs-target="#collapseOne" aria-expanded="false" aria-controls="collapseOne">
                        Дополнительные опции
                    </button>
                </h2>
                <div id="collapseOne" class="accordion-collapse collapse">
                    <div class="accordion-body">
                        @* Кондиционер, с помощью JS дублируется и для других опций *@
                        <div class="border border-1 rounded p-2 shadow-sm mb-3" data-additional-option="1">
                            <div class="form-check form-switch">
                                <input class="form-check-input" type="checkbox" role="button" id="air_conditioner_checkbox"
                                       onchange="onAdditionalOptionCheckboxChange(this)">
                                <label class="form-check-label" for="air_conditioner_checkbox">Кондиционер</label>
                            </div>
                            <div class="d-none" id="air_conditioner_settings">
                                <div class="row row-cols-1 row-cols-md-2">
                                    <div class="col d-block d-md-flex justify-content-center align-items-center">
                                        <div class="form-check">
                                            <input class="form-check-input" type="checkbox" value="" id="air_conditioner_required">
                                            <label class="form-check-label" for="air_conditioner_required">
                                                Обязательно
                                            </label>
                                        </div>
                                    </div>
                                    <div class="col">
                                        <input type="text" class="form-control" id="air_conditioner_price" placeholder="Цена"
                                               oninput="unsetIsInvalidState(this)">
                                        <div class="invalid-feedback">
                                            Введите положительное число или 0.
                                        </div>
                                    </div>
                                </div>
                            </div>
                        </div>
                    </div>
                </div>
            </div>
        </div>
        <input type="submit" class="btn btn-success w-100" value="Добавить"/>
    </div>
</form>


@section Scripts
{
	<script type="text/javascript">
		function unsetIsInvalidState(element) {
			element.classList.remove('is-invalid');
		}
		
		function onAdditionalOptionCheckboxChange(element) {
			const settingsDiv = document.getElementById(`${element.id.replace('_checkbox', '_settings')}`);
			setDisplayNone(settingsDiv, element.checked);
		}
		
		function validateAdditionalOptionsGroup() {
			const priceFields = document.querySelectorAll('[id$="_price"]');

			for (const priceField of priceFields) {
				const enabledCheckbox = document.querySelector(`#${priceField.id.replace('_price', '_checkbox')}`);
				if (enabledCheckbox.checked) {
					inputIsMoreThanValidation(priceField, 0, false, true);
				} else {
					priceField.classList.remove('is-invalid');
				}
			}
		}
		
		function setDisplayNone(element, displayed) {
			if (displayed)
				element.classList.remove("d-none")
			else
				element.classList.add("d-none");
		}

		function updateFuelTypeHidden() {
			const fuelTypeValue = document.getElementById("fuel_type_value");
			const fuelTypePetrolCheckbox = document.getElementById("fuel_type_petrol");
			const fuelTypeDieselCheckbox = document.getElementById("fuel_type_diesel");
			const fuelTypeGasCheckbox = document.getElementById("fuel_type_gas");
			const fuelTypeElectricCheckbox = document.getElementById("fuel_type_electric");

			fuelTypeValue.value = 0;
			fuelTypeValue.value |= fuelTypePetrolCheckbox.checked ? fuelTypePetrolCheckbox.value : 0;
			fuelTypeValue.value |= fuelTypeDieselCheckbox.checked ? fuelTypeDieselCheckbox.value : 0;
			fuelTypeValue.value |= fuelTypeGasCheckbox.checked ? fuelTypeGasCheckbox.value : 0;
			fuelTypeValue.value |= fuelTypeElectricCheckbox.checked ? fuelTypeElectricCheckbox.value : 0;
		}
		
		function updateAdditionalOptionsHidden() {
			const additionalOptionsHidden = document.getElementById("additional_car_options");
			const avaliableOptions = [];
			for (const [index, checkbox] of 
				document.querySelectorAll('[data-additional-option=\'1\'] [id$=_checkbox]').entries()) {
				if (checkbox.checked) {
					avaliableOptions.push({
						'type': index, 
						'price': parseFloat(document.querySelectorAll('[data-additional-option=\'1\'] [id$=_price]')[index].value),
						'isRequired': document.querySelectorAll('[data-additional-option=\'1\'] [id$=_required]')[index].checked
					})
				}
			}
			additionalOptionsHidden.value = JSON.stringify(avaliableOptions);
		}

		function validateForm(event) {
			const brandInput = document.getElementById("brand_input");
			const modelInput = document.getElementById("model_input");
			const priceInput = document.getElementById("price_input");
			const colorInput = document.getElementById("color_input");
			const engineCapacityInput = document.getElementById("engine_capacity_input");
			const corpusTypeSelect = document.getElementById("corpus_type_select");

			const fuelTypePetrolCheckbox = document.getElementById("fuel_type_petrol");
			const fuelTypeDieselCheckbox = document.getElementById("fuel_type_diesel");
			const fuelTypeGasCheckbox = document.getElementById("fuel_type_gas");
			const fuelTypeElectricCheckbox = document.getElementById("fuel_type_electric");

			const countInput = document.getElementById("count_input");
			const imageInput = document.getElementById("image_input");
			const bigImagesInput = document.getElementById("big_images_input");

			validateBrand();
			validateModel();
			validatePrice();
			validateColor();
			validateEngineCapacity();
			validateCorpusType();
			validateFuelType();
			validateCount();
			validateFileInput(imageInput);
			validateFileInput(bigImagesInput);
			validateAdditionalOptionsGroup();
			updateFuelTypeHidden();
			updateAdditionalOptionsHidden();
			
			if (document.querySelectorAll('.is-invalid').length !== 0) {
				event.preventDefault();
			}
		}

		function inputIsNotEmptyOrWhiteSpaceValidation(input) {
			if (input.value.trim() === '') {
				input.classList.add('is-invalid');
			} else {
				input.classList.remove('is-invalid');
			}
		}

		function inputIsMoreThanValidation(input, min, onlyInts, inclusive) {
			input.value = input.value.trim();
			const value = parseFloat(input.value.replace(',', '.'));
			const regex = /^[0-9]+([.,]?[0-9]+)?$/;
			
			if (isNaN(value) ||
				(inclusive ? value < min : value <= min) ||
				(onlyInts ? !Number.isInteger(value) : false) ||
				!regex.test(input.value)) {
				input.classList.add('is-invalid')
			} else {
				input.classList.remove('is-invalid');
			}
		}

		function validateBrand() {
			const brandInput = document.getElementById("brand_input");
			inputIsNotEmptyOrWhiteSpaceValidation(brandInput);
		}

		function validateModel() {
			const modelInput = document.getElementById("model_input");
			inputIsNotEmptyOrWhiteSpaceValidation(modelInput);
		}

		function validatePrice() {
			const priceInput = document.getElementById("price_input");
			inputIsMoreThanValidation(priceInput, 0);
		}

		function validateColor() {
			const colorInput = document.getElementById("color_input");
			inputIsNotEmptyOrWhiteSpaceValidation(colorInput);
		}

		function validateEngineCapacity() {
			const engineCapacityInput = document.getElementById("engine_capacity_input");
			inputIsMoreThanValidation(engineCapacityInput, 0);
		}

		function validateCorpusType() {
			const corpusTypeSelect = document.getElementById("corpus_type_select");
			if (corpusTypeSelect.value === '' ||
				(corpusTypeSelect.value != 0 && corpusTypeSelect.value != 1)) {
				corpusTypeSelect.classList.add('is-invalid')
			} else {
				corpusTypeSelect.classList.remove('is-invalid')
			}
		}

		function validateFuelType() {
			const fuelTypePetrolCheckbox = document.getElementById("fuel_type_petrol");
			const fuelTypeDieselCheckbox = document.getElementById("fuel_type_diesel");
			const fuelTypeGasCheckbox = document.getElementById("fuel_type_gas");
			const fuelTypeElectricCheckbox = document.getElementById("fuel_type_electric");

			if (!fuelTypePetrolCheckbox.checked &&
				!fuelTypeDieselCheckbox.checked &&
				!fuelTypeGasCheckbox.checked &&
				!fuelTypeElectricCheckbox.checked) {
				fuelTypePetrolCheckbox.parentElement.classList.add('is-invalid')
			} else {
				fuelTypePetrolCheckbox.parentElement.classList.remove('is-invalid')
			}
		}

		function validateCount() {
			const countInput = document.getElementById("count_input");
			inputIsMoreThanValidation(countInput, 0, true, true);
		}
		
		function validateFileInput(input) {
			const allowedExtensions = ['jpg', 'jpeg', 'png'];
			for (const file of input.files) {
				const fileExtension = file.name.split('.').pop().toLowerCase();
				if (!allowedExtensions.includes(fileExtension)) {
					input.classList.add('is-invalid');
					input.value = ''; // очищение списка выбранных файлов
					return;
				}
			}

			input.classList.remove('is-invalid');
		}
		
		window.addEventListener('load', () => {
			const airConditionerOption = document.querySelector("[data-additional-option='1']");
			const optionNames = ['heated_drivers_seat', 'seat_height_adjustment', 'different_car_color'].reverse();
			const optionDisplayNames = ['Подогрев сидения водителя', 'Регулировка сидения водителя по высоте', 'Другой цвет авто'].reverse();
			for (const [index, optionName] of optionNames.entries()) {
				const newOption = airConditionerOption.outerHTML
					.replaceAll('air_conditioner', optionName)
					.replace('Кондиционер', optionDisplayNames[index]);
				airConditionerOption.insertAdjacentHTML('afterend', newOption);
			}
		})
	</script>
}