@{
}

<form method="post" enctype="multipart/form-data" oninput="updateFuelTypeHidden()" onsubmit="return validateForm()">
	<div class="container p-3 my-3 border border-1 rounded rounded-3 shadow" style="max-width: 700px">
		<h1 class="text-center">Добавление товара</h1>
		<hr />
		@* Марка *@
		<div class="mb-3">
			<label for="brand_input" class="form-label">Марка</label>
			<input type="text" name="brand" class="form-control" id="brand_input" placeholder="Введите марку"
				   oninput="unsetIsInvalidState(this)">
			<div class="invalid-feedback">
				Заполните это поле.
			</div>
		</div>
		@* Модель *@
		<div class="mb-3">
			<label for="model_input" class="form-label">Модель</label>
			<input type="text" name="model" class="form-control" id="model_input" placeholder="Введите модель"
				   oninput="unsetIsInvalidState(this)">
			<div class="invalid-feedback">
				Заполните это поле.
			</div>
		</div>
		@* Цена за стандартную комплектацию *@
		<div class="mb-3">
			<label for="price_input" class="form-label">Цена за стандартную комплектацию</label>
			<input type="text" name="price" class="form-control" id="price_input"
				   placeholder="Введите цену за стандартную комплектацию" oninput="unsetIsInvalidState(this)">
			<div class="invalid-feedback">
				Введите положительное число.
			</div>
		</div>
		@* Цвет *@
		<div class="mb-3">
			<label for="color_input" class="form-label">Цвет</label>
			<input type="text" name="color" class="form-control" id="color_input" placeholder="Введите цвет"
				   oninput="unsetIsInvalidState(this)">
			<div class="invalid-feedback">
				Заполните это поле.
			</div>
		</div>
		@* Объём двигателя *@
		<div class="mb-3">
			<label for="engine_capacity_input" class="form-label">Объём двигателя <span class="form-text">(литры)</span></label>
			<input type="text" name="engine_capacity" class="form-control" id="engine_capacity_input"
				   placeholder="Введите объём двигателя" oninput="unsetIsInvalidState(this)">
			<div class="invalid-feedback">
				Введите положительное число.
			</div>
		</div>
		@* Вид корпуса *@
		<div class="mb-3">
			<label for="corpus_type_select" class="form-label">Вид корпуса</label>
			<select name="corpus_type" id="corpus_type_select" class="form-select"
					oninput="unsetIsInvalidState(this)">
				<option disabled selected value="">Выберите вид корпуса</option>
				<option value="0">Седан</option>
				<option value="1">Хэтчбек</option>
			</select>
			<div class="invalid-feedback">
				Выберите вид корпуса.
			</div>
		</div>
		@* Вид топлива *@
		<div class="mb-3">
			<input type="hidden" id="fuel_type_value" name="fuel_type" value="0" />
			<label class="form-label">Вид топлива</label>
			<div class="form-check form-switch">
				<input class="form-check-input" value="1" type="checkbox" role="button" id="fuel_type_petrol"
					   onchange="unsetIsInvalidState(this.parentElement)">
				<label class="form-check-label" for="fuel_type_petrol">Бензин</label>
			</div>
			<div class="form-check form-switch">
				<input class="form-check-input" value="2" type="checkbox" role="button" id="fuel_type_diesel"
					   onchange="unsetIsInvalidState(document.querySelector('.form-check.form-switch'))">
				<label class="form-check-label" for="fuel_type_diesel">Дизель</label>
			</div>
			<div class="form-check form-switch">
				<input class="form-check-input" value="4" type="checkbox" role="button" id="fuel_type_gas"
					   onchange="unsetIsInvalidState(document.querySelector('.form-check.form-switch'))">
				<label class="form-check-label" for="fuel_type_gas">Газ</label>
			</div>
			<div class="form-check form-switch">
				<input class="form-check-input" value="8" type="checkbox" role="button" id="fuel_type_electric"
					   onchange="unsetIsInvalidState(document.querySelector('.form-check.form-switch'))">
				<label class="form-check-label" for="fuel_type_electric">Электрика</label>
			</div>
			<div class="invalid-feedback">
				Выберите хотябы один элемент.
			</div>
		</div>
		@* Количество единиц товара на складе *@
		<div class="mb-3">
			<label for="count_input" class="form-label">Количество единиц товара на складе</label>
			<input type="text" name="count" class="form-control" id="count_input"
				   placeholder="Введите количество единиц товара на складе" oninput="unsetIsInvalidState(this)">
			<div class="invalid-feedback">
				Введите целое положительное число.
			</div>
		</div>
		@* Картинка для /catalog *@
		<div class="mb-3">
			<label for="image_input" class="form-label">Картинка для /catalog</label>
			<input class="form-control" name="image" accept=".jpg, .jpeg, .png" type="file" id="image_input">
		</div>
		@* Картинки для /catalog/{id} *@
		<div class="mb-3">
			<label for="big_images_input" class="form-label">Картинки для /catalog/{id}</label>
			<input class="form-control" name="big_images" accept=".jpg, .jpeg, .png" type="file" id="big_images_input" multiple>
		</div>

		<input type="submit" class="btn btn-success w-100" value="Добавить" />
	</div>
</form>


@section Scripts
{
	<script type="text/javascript">
		function unsetIsInvalidState(element) {
			element.classList.remove('is-invalid');
		}

		function updateFuelTypeHidden() {
			const fuelTypeValue = document.getElementById("fuel_type_value");
			const fuelTypePetrolCheckbox = document.getElementById("fuel_type_petrol");
			const fuelTypeDieselCheckbox = document.getElementById("fuel_type_diesel");
			const fuelTypeGasCheckbox = document.getElementById("fuel_type_gas");
			const fuelTypeElectricCheckbox = document.getElementById("fuel_type_electric");

			fuelTypeValue.value = 0;
			fuelTypeValue.value |= fuelTypePetrolCheckbox.checked ? fuelTypePetrolCheckbox.value : 0;
			fuelTypeValue.value |= fuelTypeDieselCheckbox.checked ? fuelTypeDieselCheckbox.value : 0;
			fuelTypeValue.value |= fuelTypeGasCheckbox.checked ? fuelTypeGasCheckbox.value : 0;
			fuelTypeValue.value |= fuelTypeElectricCheckbox.checked ? fuelTypeElectricCheckbox.value : 0;
		}

		function validateForm() {
			const brandInput = document.getElementById("brand_input");
			const modelInput = document.getElementById("model_input");
			const priceInput = document.getElementById("price_input");
			const colorInput = document.getElementById("color_input");
			const engineCapacityInput = document.getElementById("engine_capacity_input");
			const corpusTypeSelect = document.getElementById("corpus_type_select");

			const fuelTypePetrolCheckbox = document.getElementById("fuel_type_petrol");
			const fuelTypeDieselCheckbox = document.getElementById("fuel_type_diesel");
			const fuelTypeGasCheckbox = document.getElementById("fuel_type_gas");
			const fuelTypeElectricCheckbox = document.getElementById("fuel_type_electric");

			const countInput = document.getElementById("count_input");
			const imageInput = document.getElementById("image_input");
			const bigImagesInput = document.getElementById("big_images_input");

			validateBrand();
			validateModel();
			validatePrice();
			validateColor();
			validateEngineCapacity();
			validateCorpusType();
			validateFuelType();
			validateCount();

			return document.querySelectorAll('.is-invalid').length === 0;
		}

		function inputIsNotEmptyOrWhiteSpaceValidation(input) {
			if (input.value.trim() === '') {
				input.classList.add('is-invalid');
			} else {
				input.classList.remove('is-invalid');
			}
		}

		function inputIsMoreThanValidation(input, min, onlyInts, inclusive) {
			input.value = input.value.trim();
			const value = parseFloat(input.value.replace(',', '.'));
			if (isNaN(value) ||
				(inclusive ? value < min : value <= min) ||
				(onlyInts ? !Number.isInteger(value) : false)) {
				input.classList.add('is-invalid')
			} else {
				input.classList.remove('is-invalid');
			}
		}

		function validateBrand() {
			const brandInput = document.getElementById("brand_input");
			inputIsNotEmptyOrWhiteSpaceValidation(brandInput);
		}

		function validateModel() {
			const modelInput = document.getElementById("model_input");
			inputIsNotEmptyOrWhiteSpaceValidation(modelInput);
		}

		function validatePrice() {
			const priceInput = document.getElementById("price_input");
			inputIsMoreThanValidation(priceInput, 0);
		}

		function validateColor() {
			const colorInput = document.getElementById("color_input");
			inputIsNotEmptyOrWhiteSpaceValidation(colorInput);
		}

		function validateEngineCapacity() {
			const engineCapacityInput = document.getElementById("engine_capacity_input");
			inputIsMoreThanValidation(engineCapacityInput, 0);
		}

		function validateCorpusType() {
			const corpusTypeSelect = document.getElementById("corpus_type_select");
			if (corpusTypeSelect.value === '' ||
				(corpusTypeSelect.value != 0 && corpusTypeSelect.value != 1)) {
				corpusTypeSelect.classList.add('is-invalid')
			} else {
				corpusTypeSelect.classList.remove('is-invalid')
			}
		}

		function validateFuelType() {
			const fuelTypePetrolCheckbox = document.getElementById("fuel_type_petrol");
			const fuelTypeDieselCheckbox = document.getElementById("fuel_type_diesel");
			const fuelTypeGasCheckbox = document.getElementById("fuel_type_gas");
			const fuelTypeElectricCheckbox = document.getElementById("fuel_type_electric");

			if (!fuelTypePetrolCheckbox.checked &&
				!fuelTypeDieselCheckbox.checked &&
				!fuelTypeGasCheckbox.checked &&
				!fuelTypeElectricCheckbox.checked) {
				fuelTypePetrolCheckbox.parentElement.classList.add('is-invalid')
			} else {
				fuelTypePetrolCheckbox.parentElement.classList.remove('is-invalid')
			}
		}

		function validateCount() {
			const countInput = document.getElementById("count_input");
			inputIsMoreThanValidation(countInput, 0, true, true);
		}
	</script>
}