// <auto-generated />
using System;
using CarShop.CarStorage.Database;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

#nullable disable

namespace CarShop.CarStorage.Migrations
{
    [DbContext(typeof(CarStorageDatabase))]
    [Migration("20241021103443_AddCarEditProcess")]
    partial class AddCarEditProcess
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.8")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("CarShop.ServiceDefaults.ServiceInterfaces.CarStorage.AdditionalCarOption", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<long?>("CarId")
                        .HasColumnType("bigint");

                    b.Property<bool>("IsRequired")
                        .HasColumnType("boolean")
                        .HasAnnotation("Relational:JsonPropertyName", "isRequired");

                    b.Property<double>("Price")
                        .HasColumnType("double precision")
                        .HasAnnotation("Relational:JsonPropertyName", "price");

                    b.Property<int>("Type")
                        .HasColumnType("integer")
                        .HasAnnotation("Relational:JsonPropertyName", "type");

                    b.HasKey("Id");

                    b.HasIndex("CarId");

                    b.ToTable("AdditionalCarOption");
                });

            modelBuilder.Entity("CarShop.ServiceDefaults.ServiceInterfaces.CarStorage.Car", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<string[]>("BigImageURLs")
                        .IsRequired()
                        .HasColumnType("text[]");

                    b.Property<string>("Brand")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Color")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int>("CorpusType")
                        .HasColumnType("integer");

                    b.Property<int>("Count")
                        .HasColumnType("integer");

                    b.Property<double>("EngineCapacity")
                        .HasColumnType("double precision");

                    b.Property<int>("FuelType")
                        .HasColumnType("integer");

                    b.Property<string>("ImageUrl")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Model")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<double>("PriceForStandartConfiguration")
                        .HasColumnType("double precision");

                    b.HasKey("Id");

                    b.ToTable("Cars");
                });

            modelBuilder.Entity("CarShop.ServiceDefaults.ServiceInterfaces.CarStorage.CarConfiguration", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<bool>("AirConditioner")
                        .HasColumnType("boolean");

                    b.Property<long>("CarId")
                        .HasColumnType("bigint");

                    b.Property<string>("DifferentCarColor")
                        .HasColumnType("text");

                    b.Property<bool>("HeatedDriversSeat")
                        .HasColumnType("boolean");

                    b.Property<bool>("SeatHeightAdjustment")
                        .HasColumnType("boolean");

                    b.HasKey("Id");

                    b.HasIndex("CarId");

                    b.ToTable("CarConfigurations");
                });

            modelBuilder.Entity("CarShop.ServiceDefaults.ServiceInterfaces.CarStorage.CarEditProcess", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<long>("AdminId")
                        .HasColumnType("bigint");

                    b.Property<long>("CarId")
                        .HasColumnType("bigint");

                    b.HasKey("Id");

                    b.ToTable("CarEditProcesses");
                });

            modelBuilder.Entity("CarShop.ServiceDefaults.ServiceInterfaces.CarStorage.AdditionalCarOption", b =>
                {
                    b.HasOne("CarShop.ServiceDefaults.ServiceInterfaces.CarStorage.Car", null)
                        .WithMany("AdditionalCarOptions")
                        .HasForeignKey("CarId");
                });

            modelBuilder.Entity("CarShop.ServiceDefaults.ServiceInterfaces.CarStorage.CarConfiguration", b =>
                {
                    b.HasOne("CarShop.ServiceDefaults.ServiceInterfaces.CarStorage.Car", null)
                        .WithMany("CarConfigurations")
                        .HasForeignKey("CarId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("CarShop.ServiceDefaults.ServiceInterfaces.CarStorage.CarEditProcess", b =>
                {
                    b.OwnsOne("CarShop.ServiceDefaults.ServiceInterfaces.ApiGateway.CarEditProcessData", "Process", b1 =>
                        {
                            b1.Property<long>("CarEditProcessId")
                                .HasColumnType("bigint");

                            b1.Property<string>("AdditionalCarOptionsJson")
                                .HasColumnType("text")
                                .HasAnnotation("Relational:JsonPropertyName", "additional_car_options");

                            b1.Property<string[]>("BigImages")
                                .IsRequired()
                                .HasColumnType("text[]")
                                .HasAnnotation("Relational:JsonPropertyName", "big_image_urls");

                            b1.Property<string>("Brand")
                                .IsRequired()
                                .HasColumnType("text")
                                .HasAnnotation("Relational:JsonPropertyName", "brand");

                            b1.Property<string>("Color")
                                .IsRequired()
                                .HasColumnType("text")
                                .HasAnnotation("Relational:JsonPropertyName", "color");

                            b1.Property<int>("CorpusType")
                                .HasColumnType("integer")
                                .HasAnnotation("Relational:JsonPropertyName", "corpus_type");

                            b1.Property<int>("Count")
                                .HasColumnType("integer")
                                .HasAnnotation("Relational:JsonPropertyName", "count");

                            b1.Property<double>("EngineCapacity")
                                .HasColumnType("double precision")
                                .HasAnnotation("Relational:JsonPropertyName", "engine_capacity");

                            b1.Property<int>("FuelType")
                                .HasColumnType("integer")
                                .HasAnnotation("Relational:JsonPropertyName", "fuel_type");

                            b1.Property<string>("Image")
                                .IsRequired()
                                .HasColumnType("text")
                                .HasAnnotation("Relational:JsonPropertyName", "image_url");

                            b1.Property<string>("Model")
                                .IsRequired()
                                .HasColumnType("text")
                                .HasAnnotation("Relational:JsonPropertyName", "model");

                            b1.Property<double>("Price")
                                .HasColumnType("double precision")
                                .HasAnnotation("Relational:JsonPropertyName", "price");

                            b1.HasKey("CarEditProcessId");

                            b1.ToTable("CarEditProcesses");

                            b1.WithOwner()
                                .HasForeignKey("CarEditProcessId");
                        });

                    b.Navigation("Process")
                        .IsRequired();
                });

            modelBuilder.Entity("CarShop.ServiceDefaults.ServiceInterfaces.CarStorage.Car", b =>
                {
                    b.Navigation("AdditionalCarOptions");

                    b.Navigation("CarConfigurations");
                });
#pragma warning restore 612, 618
        }
    }
}
